stages:
  - docker
  - test
  - pkg-test
  - deploy

variables:
  UBUNTU_BIONIC_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-UBUNTU_BIONIC
  UBUNTU_XENIAL_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-UBUNTU_XENIAL
  DEBIAN_TESTING_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-DEBIAN_TESTING
  UBUNTU_BIONIC_MASTER_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-master-UBUNTU_BIONIC
  UBUNTU_XENIAL_MASTER_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-master-UBUNTU_XENIAL
  UBUNTU_BIONIC_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-UBUNTU_BIONIC
  UBUNTU_XENIAL_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-UBUNTU_XENIAL
  DEBIAN_TESTING_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-DEBIAN_TESTING
  UBUNTU_BIONIC_PR_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-${CI_COMMIT_REF_SLUG}-UBUNTU_BIONIC
  UBUNTU_XENIAL_PR_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-${CI_COMMIT_REF_SLUG}-UBUNTU_XENIAL

  CCACHE_DIR: $CI_PROJECT_DIR/ccache

  GIT_SUBMODULE_STRATEGY: recursive

Docker Setup:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    # main images
    - docker pull "$UBUNTU_BIONIC_PR_IMAGE" || docker pull "$UBUNTU_BIONIC_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_BIONIC_MASTER_IMAGE" --cache-from "$UBUNTU_BIONIC_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.ubuntu.bionic" -t "$UBUNTU_BIONIC_PR_IMAGE" .
    - docker push "$UBUNTU_BIONIC_PR_IMAGE"

    - docker pull "$UBUNTU_XENIAL_PR_IMAGE" || docker pull "$UBUNTU_XENIAL_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_XENIAL_MASTER_IMAGE" --cache-from "$UBUNTU_XENIAL_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.ubuntu.xenial" -t "$UBUNTU_XENIAL_PR_IMAGE" .
    - docker push "$UBUNTU_XENIAL_PR_IMAGE"

    - docker pull "$DEBIAN_TESTING_PR_IMAGE" || docker pull "$DEBIAN_TESTING_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$DEBIAN_TESTING_MASTER_IMAGE" --cache-from "$DEBIAN_TESTING_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.debian.testing" -t "$DEBIAN_TESTING_PR_IMAGE" .
    - docker push "$DEBIAN_TESTING_PR_IMAGE"

    # used for install tests
    - docker pull "$UBUNTU_BIONIC_PR_INSTALLIMAGE" || docker pull "$UBUNTU_BIONIC_MASTER_INSTALLIMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_BIONIC_MASTER_INSTALLIMAGE" --cache-from "$UBUNTU_BIONIC_PR_INSTALLIMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile-test-install.ubuntu.bionic" -t "$UBUNTU_BIONIC_PR_INSTALLIMAGE" .
    - docker push "$UBUNTU_BIONIC_PR_INSTALLIMAGE"

    - docker pull "$UBUNTU_XENIAL_PR_INSTALLIMAGE" || docker pull "$UBUNTU_XENIAL_MASTER_INSTALLIMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_XENIAL_MASTER_INSTALLIMAGE" --cache-from "$UBUNTU_XENIAL_PR_INSTALLIMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile-test-install.ubuntu.xenial" -t "$UBUNTU_XENIAL_PR_INSTALLIMAGE" .
    - docker push "$UBUNTU_XENIAL_PR_INSTALLIMAGE"

coverage:
  variables:
    TEST_BUILD_DIR: 'build-coverage'
    TEST_CMAKE_BUILD_TYPE: 'Valgrind'
    TEST_WITH_COVERAGE: '1'
    TEST_WITH_P11: '1'
    TEST_WITH_FAULT_INJECTION: '1'
    TEST_SOTA_PACKED_CREDENTIALS: "$CI_PROJECT_DIR/credentials.zip"
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  stage: test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ccache/
  artifacts:
    paths:
      - build-coverage/coverage/
  script:
    - aws s3 cp s3://ota-gitlab-ci/hereotaconnect_prod.zip $CI_PROJECT_DIR/credentials.zip
    - ./scripts/test.sh

nop11:
  variables:
    TEST_BUILD_DIR: 'build-nop11'
    TEST_CMAKE_BUILD_TYPE: 'Debug'
    TEST_WITH_TESTSUITE: '0'
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  stage: test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ccache/
  script:
    - ./scripts/test.sh

scan-build:
  stage: test
  only:
    - schedules
  # prepare build to be submitted for static code analysis
  variables:
    TEST_BUILD_DIR: 'scan-build'
    TEST_CMAKE_BUILD_TYPE: 'Debug'
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/scan-build/bin"
    TEST_WITH_TESTSUITE: '0'
    TEST_WITH_SOTA_TOOLS: '0'
    TEST_WITH_OSTREE: '0'
    TEST_WITH_DEB: '0'
    TEST_WITH_ISOTP: '0'
    TEST_WITH_PARTIAL: '0'
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  script:
    - mkdir -p $TEST_INSTALL_DESTDIR
    - ./scripts/test.sh
    - git archive -o scan.tar HEAD
  artifacts:
    paths:
      - scan-build/bin
      - scan.tar

veracode-scan:
  stage: deploy
  only:
    - schedules
  dependencies:
    - scan-build
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  before_script:
    - apt update
    - apt-get -q -y install openjdk-8-jdk
# The lastest wrapper version can be found in https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/
    - wget -q -O veracode-wrapper.jar https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/${VERACODE_WRAPPER_VERSION}/vosp-api-wrappers-java-${VERACODE_WRAPPER_VERSION}.jar
  script:
    - tar -f scan.tar --append scan-build/bin
    - java -jar veracode-wrapper.jar -vid ${VERACODE_API_ID} -vkey ${VERACODE_API_KEY}
      -action UploadAndScan -appname "OTA Client" -createprofile true -autoscan true
      -filepath scan.tar -version "job ${CI_JOB_ID} in pipeline ${CI_PIPELINE_ID} for ${CI_PROJECT_NAME} repo"

debian-build+static:
  variables:
    TEST_BUILD_DIR: 'build-debian-testing'
    TEST_CC: 'clang'
    # should run with valgrind but some leaks are still unfixed
    # TEST_CMAKE_BUILD_TYPE = 'Valgrind'
    TEST_CMAKE_BUILD_TYPE: 'Debug'
    TEST_TESTSUITE_ONLY: 'crypto'
    TEST_WITH_STATICTESTS: '1'
    TEST_WITH_LOAD_TESTS: '1'
    TEST_WITH_DOCS: '1'
  image: "$DEBIAN_TESTING_PR_IMAGE"
  stage: test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ccache/
  script:
    - ./scripts/test.sh

bionic-pkg:
  variables:
    TEST_BUILD_DIR: 'build-bionic'
    TEST_INSTALL_RELEASE_NAME: '-ubuntu_18.04'
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-bionic/pkg"

  image: "$UBUNTU_BIONIC_PR_IMAGE"
  stage: test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ccache/
  artifacts:
    paths:
      - build-bionic/pkg
  script:
    - mkdir -p $TEST_INSTALL_DESTDIR
    - ./scripts/build_ubuntu.sh

xenial-pkg:
  variables:
    TEST_BUILD_DIR: 'build-xenial'
    TEST_INSTALL_RELEASE_NAME: '-ubuntu_16.04'
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-xenial/pkg"

  image: "$UBUNTU_XENIAL_PR_IMAGE"
  stage: test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - ccache/
  artifacts:
    paths:
      - build-xenial/pkg
  script:
    - mkdir -p $TEST_INSTALL_DESTDIR
    - ./scripts/build_ubuntu.sh

bionic-pkg-test:
  variables:
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-bionic/pkg"

  image: "$UBUNTU_BIONIC_PR_INSTALLIMAGE"
  stage: pkg-test
  script:
    - ./scripts/test_install_garage_deploy.sh

xenial-pkg-test:
  variables:
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-xenial/pkg"

  image: "$UBUNTU_XENIAL_PR_INSTALLIMAGE"
  stage: pkg-test
  script:
    - ./scripts/test_install_garage_deploy.sh
    - ./scripts/test_install_aktualizr_and_update.sh
    - ./scripts/test_aktualizr_repo.sh

# publish coverage results on gitlab pages

pages:
  stage: deploy
  dependencies:
    - coverage
  script:
    - mv build-coverage/coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  # would be nice to have on a per-PR basis: # https://gitlab.com/gitlab-org/gitlab-ce/issues/35141
  only:
    - master
