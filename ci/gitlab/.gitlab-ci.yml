stages:
  - docker
  - test
  - deploy

variables:
  UBUNTU_BIONIC_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-UBUNTU_BIONIC
  UBUNTU_XENIAL_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-UBUNTU_XENIAL
  DEBIAN_TESTING_MASTER_IMAGE: ${CI_REGISTRY_IMAGE}:ci-master-DEBIAN_TESTING
  UBUNTU_BIONIC_MASTER_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-master-UBUNTU_BIONIC
  UBUNTU_XENIAL_MASTER_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-master-UBUNTU_XENIAL
  UBUNTU_BIONIC_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-UBUNTU_BIONIC
  UBUNTU_XENIAL_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-UBUNTU_XENIAL
  DEBIAN_TESTING_PR_IMAGE: ${CI_REGISTRY_IMAGE}:ci-${CI_COMMIT_REF_SLUG}-DEBIAN_TESTING
  UBUNTU_BIONIC_PR_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-${CI_COMMIT_REF_SLUG}-UBUNTU_BIONIC
  UBUNTU_XENIAL_PR_INSTALLIMAGE: ${CI_REGISTRY_IMAGE}:ci-install-${CI_COMMIT_REF_SLUG}-UBUNTU_XENIAL

  GIT_SUBMODULE_STRATEGY: recursive

# Build the Docker image that will be used in subsequent CI/CD stages
Docker Setup:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    # main images
    - docker pull "$UBUNTU_BIONIC_PR_IMAGE" || docker pull "$UBUNTU_BIONIC_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_BIONIC_MASTER_IMAGE" --cache-from "$UBUNTU_BIONIC_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.ubuntu.bionic" -t "$UBUNTU_BIONIC_PR_IMAGE" .
    - docker push "$UBUNTU_BIONIC_PR_IMAGE"

    - docker pull "$UBUNTU_XENIAL_PR_IMAGE" || docker pull "$UBUNTU_XENIAL_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_XENIAL_MASTER_IMAGE" --cache-from "$UBUNTU_XENIAL_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.ubuntu.xenial" -t "$UBUNTU_XENIAL_PR_IMAGE" .
    - docker push "$UBUNTU_XENIAL_PR_IMAGE"

    - docker pull "$DEBIAN_TESTING_PR_IMAGE" || docker pull "$DEBIAN_TESTING_MASTER_IMAGE" || true
    - docker build --pull --cache-from "$DEBIAN_TESTING_MASTER_IMAGE" --cache-from "$DEBIAN_TESTING_PR_IMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile.debian.testing" -t "$DEBIAN_TESTING_PR_IMAGE" .
    - docker push "$DEBIAN_TESTING_PR_IMAGE"

    # used for install tests
    - docker pull "$UBUNTU_BIONIC_PR_INSTALLIMAGE" || docker pull "$UBUNTU_BIONIC_MASTER_INSTALLIMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_BIONIC_MASTER_INSTALLIMAGE" --cache-from "$UBUNTU_BIONIC_PR_INSTALLIMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile-test-install.ubuntu.bionic" -t "$UBUNTU_BIONIC_PR_INSTALLIMAGE" .
    - docker push "$UBUNTU_BIONIC_PR_INSTALLIMAGE"

    - docker pull "$UBUNTU_XENIAL_PR_INSTALLIMAGE" || docker pull "$UBUNTU_XENIAL_MASTER_INSTALLIMAGE" || true
    - docker build --pull --cache-from "$UBUNTU_XENIAL_MASTER_INSTALLIMAGE" --cache-from "$UBUNTU_XENIAL_PR_INSTALLIMAGE" -f "$CI_PROJECT_DIR/docker/Dockerfile-test-install.ubuntu.xenial" -t "$UBUNTU_XENIAL_PR_INSTALLIMAGE" .
    - docker push "$UBUNTU_XENIAL_PR_INSTALLIMAGE"

coverage:
  variables:
    TEST_BUILD_DIR: 'build-coverage'
    TEST_CMAKE_BUILD_TYPE: 'Valgrind'
    TEST_WITH_COVERAGE: '1'
    TEST_WITH_P11: '1'
    TEST_WITH_FAULT_INJECTION: '1'
    TEST_SOTA_PACKED_CREDENTIALS: '/tmp/credentials.zip'
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  stage: test
  artifacts:
    paths:
      - build-coverage/coverage/
  script:
    - aws s3 cp s3://ota-gitlab-ci/hereotaconnect_prod.zip /tmp/credentials.zip
    - $CI_PROJECT_DIR/scripts/test.sh

nop11:
  variables:
    TEST_BUILD_DIR: 'build-nop11'
    TEST_CMAKE_BUILD_TYPE: 'Valgrind'
    TEST_TESTSUITE_ONLY: 'crypto'
  image: "$UBUNTU_BIONIC_PR_IMAGE"
  stage: test
  script:
    - $CI_PROJECT_DIR/scripts/test.sh

debian-build+static:
  variables:
    TEST_BUILD_DIR: 'build-debian-testing'
    TEST_CC: 'clang'
    # should run with valgrind but some leaks are still unfixed
    # TEST_CMAKE_BUILD_TYPE = 'Valgrind'
    TEST_CMAKE_BUILD_TYPE: 'Debug'
    TEST_TESTSUITE_ONLY: 'crypto'
    TEST_WITH_STATICTESTS: '1'
    TEST_WITH_LOAD_TESTS: '1'
    TEST_WITH_DOCS: '1'
  image: "$DEBIAN_TESTING_PR_IMAGE"
  stage: test
  script:
    - $CI_PROJECT_DIR/scripts/test.sh

bionic-pkg:
  # Build and test aktualizr bionic package
  variables:
    TEST_BUILD_DIR: 'build-bionic'
    TEST_INSTALL_RELEASE_NAME: '-ubuntu_18.04'
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-bionic/pkg"

  image: docker:latest
  services:
    - docker:dind
  stage: test
  artifacts:
    paths:
      - build-bionic/pkg/*.deb
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    - mkdir -p $TEST_INSTALL_DESTDIR
    # build package
    - docker run -eTEST_BUILD_DIR=$TEST_BUILD_DIR -eTEST_INSTALL_RELEASE_NAME=$TEST_INSTALL_RELEASE_NAME -u $(id -u):$(id -g) -v $CI_PROJECT_DIR:$CI_PROJECT_DIR -v $TEST_INSTALL_DESTDIR:/persistent --rm $UBUNTU_BIONIC_PR_IMAGE $CI_PROJECT_DIR/scripts/build_ubuntu.sh
    # run tests
    - docker run --rm -v $TEST_INSTALL_DESTDIR:/persistent -v $CI_PROJECT_DIR/scripts/:/scripts/ -t $UBUNTU_BIONIC_PR_INSTALLIMAGE /scripts/test_install_garage_deploy.sh

xenial-pkg:
  # Build and test aktualizr xenial package
  variables:
    TEST_BUILD_DIR: 'build-xenial'
    TEST_INSTALL_RELEASE_NAME: '-ubuntu_16.04'
    TEST_INSTALL_DESTDIR: "$CI_PROJECT_DIR/build-xenial/pkg"

  image: docker:latest
  services:
    - docker:dind
  stage: test
  artifacts:
    paths:
      - build-xenial/pkg/*.deb
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    - mkdir -p $TEST_INSTALL_DESTDIR
    # build package
    - docker run -eTEST_BUILD_DIR="$TEST_BUILD_DIR" -eTEST_INSTALL_RELEASE_NAME="$TEST_INSTALL_RELEASE_NAME" -u $(id -u):$(id -g) -v $CI_PROJECT_DIR:$CI_PROJECT_DIR -v $TEST_INSTALL_DESTDIR:/persistent --rm $UBUNTU_XENIAL_PR_IMAGE $CI_PROJECT_DIR/scripts/build_ubuntu.sh
    # run tests
    - docker run --rm -v $TEST_INSTALL_DESTDIR:/persistent -v $CI_PROJECT_DIR/scripts/:/scripts/ -t $UBUNTU_XENIAL_PR_INSTALLIMAGE /scripts/test_install_garage_deploy.sh
    - docker run --rm -v $TEST_INSTALL_DESTDIR:/persistent -v $CI_PROJECT_DIR/scripts/:/scripts/ -t $UBUNTU_XENIAL_PR_INSTALLIMAGE bash -c "/scripts/test_install_aktualizr_and_update.sh && /scripts/test_aktualizr_repo.sh"

pages:
  stage: deploy
  dependencies:
    - coverage
  script:
    - mv build-coverage/coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  # would be nice to have on a per-PR basis: # https://gitlab.com/gitlab-org/gitlab-ce/issues/35141
  only:
    - master
